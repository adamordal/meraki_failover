AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  vmx1:
    Type: 'AWS::EC2::Instance::Id'
    Default: i-09ba434c1bEXAMPLE
    Description: Enter vmx1 instance id
  vmx2:
    Type: 'AWS::EC2::Instance::Id'
    Default: i-09ba434c1bEXAMPLE
    Description: Enter vmx2 instance id
  RouteTableID:
    Type: String
    Default: rtb-09ba434c1bEXAMPLE
    Description: Route table ID for table pointing towards VMX in security vpc.
Resources:
  vmx1alarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: vmx1-alarm-status
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: StatusCheckFailed
      Period: 60
      Statistic: Average
      Dimensions:
        - Name: InstanceId
          Value:
            Ref: vmx1
      Threshold: 0.99
      TreatMissingData: breaching
  vmx2alarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: vmx2-alarm-status
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: StatusCheckFailed
      Period: 60
      Statistic: Average
      Dimensions:
        - Name: InstanceId
          Value:
            Ref: vmx2
      Threshold: 0.99
      TreatMissingData: breaching
  EventBridgeLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        'Fn::GetAtt':
          - vmxfailover
          - Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - EventRule0
          - Arn
  EventRule0:
    Type: 'AWS::Events::Rule'
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.cloudwatch
        detail-type:
          - CloudWatch Alarm State Change
        resources:
          - 'Fn::GetAtt':
              - vmx1alarm
              - Arn
          - 'Fn::GetAtt':
              - vmx2alarm
              - Arn
      Name: mvx-cfn-rule
      State: ENABLED
      Targets:
        - Id: LambdaFunctionforVMX
          Arn:
            'Fn::GetAtt':
              - vmxfailover
              - Arn
  vmxfailover:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: vmx-route-failover
      Handler: index.lambda_handler
      Timeout: 30
      Role:
        'Fn::GetAtt':
          - vmxfailoverLambdaRole
          - Arn
      Code:
        ZipFile: |
            import boto3
            import botocore
            import os
            
            def lambda_handler(event, context):
                vmx1 = os.environ['vmx1']
                vmx2 = os.environ['vmx2']
                routetable = os.environ['routetable']
                region = os.environ['region']
                ec2 = boto3.resource('ec2',region_name=region)
                client = boto3.client('ec2',region_name=region)
                route_table = ec2.RouteTable(routetable)
                
                if event['detail']['configuration']['metrics'][0]['metricStat']['metric']['dimensions']['InstanceId'] == vmx1:
                    #Check status of vmx2 to ensure its ok to use if not set to self (used in case both instances are offline and this is the one being brought online)
                    try:
                        response = client.describe_instance_status(InstanceIds=[vmx2])
                        vmx_instance = response['InstanceStatuses'][0]['InstanceStatus']['Details'][0]['Status']
                        vmx_system = response['InstanceStatuses'][0]['SystemStatus']['Details'][0]['Status']
                        if vmx_instance == 'passed' and vmx_system == 'passed':
                            instance = vmx2
                        else:
                            instance = vmx1
                    except:
                        instance = vmx1
            
                    #Remove old route
                    try:
                        response = client.delete_route(
                            DestinationCidrBlock='10.0.0.0/8',
                            RouteTableId=routetable
                        )
                    
                    except botocore.exceptions.ClientError as error:
                        print(error)
                    #Add new route
                    try:
                        route = route_table.create_route(
                            DestinationCidrBlock='10.0.0.0/8',
                            InstanceId=instance
                        )
                        print(f'Updated route to use {instance}')
                    except botocore.exceptions.ClientError as error:
                        print(error)
                    
                elif event['detail']['configuration']['metrics'][0]['metricStat']['metric']['dimensions']['InstanceId'] == vmx2:
                    #Check status of vmx2 to ensure its ok to use if not set to self (used in case both instances are offline and this is the one being brought online)
                    try:
                        response = client.describe_instance_status(InstanceIds=[vmx1])
                        vmx_instance = response['InstanceStatuses'][0]['InstanceStatus']['Details'][0]['Status']
                        vmx_system = response['InstanceStatuses'][0]['SystemStatus']['Details'][0]['Status']
                        if vmx_instance == 'passed' and vmx_system == 'passed':
                            instance = vmx1
                        else:
                            instance = vmx2
                    except:
                        instance = vmx2
                    #Remove Old Route
                    try:
                        response = client.delete_route(
                            DestinationCidrBlock='10.0.0.0/8',
                            RouteTableId=routetable
                        )
                    except botocore.exceptions.ClientError as error:
                        print(error)
            
                    #Add new route
                    try:
                        route = route_table.create_route(
                            DestinationCidrBlock='10.0.0.0/8',
                            InstanceId=instance
                        )
                        print(f'Updated route to use {instance}')
                    except botocore.exceptions.ClientError as error:
                        print(error)

      Runtime: python3.10
      Environment:
        Variables:
          vmx1:
            Ref: vmx1
          vmx2:
            Ref: vmx2
          region:
            Ref: 'AWS::Region'
          routetable:
            Ref: RouteTableID
  vmxfailoverLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: vmx-failover-LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: AWSLambdaVMXChangeRoutes
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateRoute'
                  - 'ec2:DeleteRoute'
                  - 'ec2:ReplaceRoute'
                  - 'ec2:DescribeRouteTables'
                Resource:
                  'Fn::Sub': >-
                    arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/${RouteTableID}
        - PolicyName: AWSLambdaVMXDescribeEC2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstanceStatus'
                Resource: '*'
